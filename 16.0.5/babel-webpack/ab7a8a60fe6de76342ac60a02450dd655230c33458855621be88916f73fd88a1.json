{"ast":null,"code":"import { Init } from '../../Inits/init-tasks';\nimport * as i0 from \"@angular/core\";\nclass TasksService extends Init {\n  constructor() {\n    super();\n    this.load();\n  }\n  getTasks() {\n    let tasks = JSON.parse(localStorage.getItem('tasks'));\n    return tasks;\n  }\n  addTask(newTask) {\n    let tasks = JSON.parse(localStorage.getItem('tasks'));\n    tasks.push(newTask);\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }\n  deleteTask(taskId) {\n    let tasks = JSON.parse(localStorage.getItem('tasks'));\n    for (let i = 0; i < tasks.length; i++) {\n      if (tasks[i].id == taskId) {\n        tasks.splice(i, 1);\n      }\n    }\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }\n  updateTask(updatedTask) {\n    let tasks = JSON.parse(localStorage.getItem('tasks'));\n    for (let i = 0; i < tasks.length; i++) {\n      if (tasks[i].id == updatedTask.id) {\n        tasks[i] = updatedTask;\n      }\n    }\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }\n  getTaskById(taskId) {\n    let tasks = JSON.parse(localStorage.getItem('tasks'));\n    return tasks.find(task => task.id === taskId);\n  }\n  getFunctionalities() {\n    let functionalities = JSON.parse(localStorage.getItem('functionalities'));\n    return functionalities;\n  }\n  getFunctionalityTitle(functionalityId) {\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\n    if (tasks && tasks.length > 0) {\n      const task = tasks.find(t => t.id === functionalityId);\n      if (task) {\n        return task.title;\n      }\n    }\n    return '';\n  }\n}\nTasksService.ɵfac = function TasksService_Factory(t) {\n  return new (t || TasksService)();\n};\nTasksService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TasksService,\n  factory: TasksService.ɵfac,\n  providedIn: 'root'\n});\nexport { TasksService };","map":{"version":3,"names":["Init","TasksService","constructor","load","getTasks","tasks","JSON","parse","localStorage","getItem","addTask","newTask","push","setItem","stringify","deleteTask","taskId","i","length","id","splice","updateTask","updatedTask","getTaskById","find","task","getFunctionalities","functionalities","getFunctionalityTitle","functionalityId","t","title","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Kacper\\Desktop\\ManageMe\\src\\app\\Services\\Tasks\\tasks.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Init } from '../../Inits/init-tasks';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TasksService extends Init{\n  tasks;\n  functionalities;\n\n  constructor() { \n    super();\n    this.load();\n  }\n\n  getTasks() {\n    let tasks = JSON.parse(localStorage.getItem('tasks'));\n    return tasks;\n  }\n\n  addTask(newTask) {\n    let tasks = JSON.parse(localStorage.getItem('tasks'));\n    tasks.push(newTask);\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }\n\n  deleteTask(taskId: string) {\n    let tasks = JSON.parse(localStorage.getItem('tasks'));\n    for(let i = 0; i < tasks.length; i++) {\n      if(tasks[i].id == taskId) {\n        tasks.splice(i, 1);\n      }\n    }\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }\n\n  updateTask(updatedTask) {\n    let tasks = JSON.parse(localStorage.getItem('tasks'));\n    for (let i = 0; i < tasks.length; i++) {\n      if (tasks[i].id == updatedTask.id) {\n        tasks[i] = updatedTask;\n      }\n    }\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }\n  \n  getTaskById(taskId: string) {\n    let tasks = JSON.parse(localStorage.getItem('tasks'));\n    return tasks.find(task => task.id === taskId);\n  }\n\n  getFunctionalities() {\n    let functionalities = JSON.parse(localStorage.getItem('functionalities'));\n    return functionalities;\n  }\n\n  getFunctionalityTitle(functionalityId: string): string {\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\n    if (tasks && tasks.length > 0) {\n      const task = tasks.find((t) => t.id === functionalityId);\n      if (task) {\n        return task.title;\n      }\n    }\n    return '';\n  }  \n}\n"],"mappings":"AACA,SAASA,IAAI,QAAQ,wBAAwB;;AAE7C,MAIaC,YAAa,SAAQD,IAAI;EAIpCE,YAAA;IACE,KAAK,EAAE;IACP,IAAI,CAACC,IAAI,EAAE;EACb;EAEAC,QAAQA,CAAA;IACN,IAAIC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;IACrD,OAAOJ,KAAK;EACd;EAEAK,OAAOA,CAACC,OAAO;IACb,IAAIN,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;IACrDJ,KAAK,CAACO,IAAI,CAACD,OAAO,CAAC;IACnBH,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEP,IAAI,CAACQ,SAAS,CAACT,KAAK,CAAC,CAAC;EACtD;EAEAU,UAAUA,CAACC,MAAc;IACvB,IAAIX,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;IACrD,KAAI,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,KAAK,CAACa,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,IAAGZ,KAAK,CAACY,CAAC,CAAC,CAACE,EAAE,IAAIH,MAAM,EAAE;QACxBX,KAAK,CAACe,MAAM,CAACH,CAAC,EAAE,CAAC,CAAC;;;IAGtBT,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEP,IAAI,CAACQ,SAAS,CAACT,KAAK,CAAC,CAAC;EACtD;EAEAgB,UAAUA,CAACC,WAAW;IACpB,IAAIjB,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;IACrD,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,KAAK,CAACa,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,IAAIZ,KAAK,CAACY,CAAC,CAAC,CAACE,EAAE,IAAIG,WAAW,CAACH,EAAE,EAAE;QACjCd,KAAK,CAACY,CAAC,CAAC,GAAGK,WAAW;;;IAG1Bd,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEP,IAAI,CAACQ,SAAS,CAACT,KAAK,CAAC,CAAC;EACtD;EAEAkB,WAAWA,CAACP,MAAc;IACxB,IAAIX,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;IACrD,OAAOJ,KAAK,CAACmB,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACN,EAAE,KAAKH,MAAM,CAAC;EAC/C;EAEAU,kBAAkBA,CAAA;IAChB,IAAIC,eAAe,GAAGrB,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAAC;IACzE,OAAOkB,eAAe;EACxB;EAEAC,qBAAqBA,CAACC,eAAuB;IAC3C,MAAMxB,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;IACvD,IAAIJ,KAAK,IAAIA,KAAK,CAACa,MAAM,GAAG,CAAC,EAAE;MAC7B,MAAMO,IAAI,GAAGpB,KAAK,CAACmB,IAAI,CAAEM,CAAC,IAAKA,CAAC,CAACX,EAAE,KAAKU,eAAe,CAAC;MACxD,IAAIJ,IAAI,EAAE;QACR,OAAOA,IAAI,CAACM,KAAK;;;IAGrB,OAAO,EAAE;EACX;;AA3DW9B,YAAa,C;mBAAbA,YAAY;AAAA;AAAZA,YAAa,C;SAAbA,YAAY;EAAA+B,OAAA,EAAZ/B,YAAY,CAAAgC,IAAA;EAAAC,UAAA,EAHX;AAAM;SAGPjC,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}