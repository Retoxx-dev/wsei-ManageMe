{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nlet TaskModalComponent = class TaskModalComponent {\n  constructor(taskService, funcService, currentStaticDataService) {\n    this.taskService = taskService;\n    this.funcService = funcService;\n    this.currentStaticDataService = currentStaticDataService;\n    this.statusOptions = [\"todo\", \"doing\", \"done\"];\n    this.priorityOptions = [\"low\", \"medium\", \"high\"];\n    this.closeTaskModal = new EventEmitter();\n    this.saveTask = new EventEmitter();\n  }\n  ngOnInit() {\n    this.Date = new Date();\n    this.task = this.taskService.getTaskById(this.taskId);\n    this.functionalityList = this.funcService.getFunctionalities();\n    this.currentProject = this.currentStaticDataService.getCurrentProject();\n    this.currentUser = this.currentStaticDataService.getCurrentUser();\n  }\n  onCloseClick() {\n    this.closeTaskModal.emit();\n  }\n  onSaveClick() {\n    console.log(this.task);\n    this.saveTask.emit(this.task);\n    this.checkIfAllTasksDone();\n    this.closeTaskModal.emit();\n  }\n  onStatusChange() {\n    if (this.task.status === 'doing') {\n      this.task.started = this.Date.toISOString();\n      this.funcService.updateFunctionalityStatus(this.task.functionality_id, 'doing');\n    }\n    if (this.task.status === 'todo') {\n      this.task.started = null;\n      this.task.end_date = null;\n    }\n    if (this.task.status === 'done') {\n      this.task.end_date = this.Date.toISOString();\n    }\n  }\n  checkIfAllTasksDone() {\n    const relatedTasks = this.taskService.getRelatedTasks(this.task.functionality_id);\n    const tasksDone = relatedTasks.filter(task => task.status === 'done');\n    if (tasksDone.length === relatedTasks.length) {\n      this.funcService.updateFunctionalityStatus(this.task.functionality_id, 'done');\n    }\n  }\n};\n__decorate([Input()], TaskModalComponent.prototype, \"taskId\", void 0);\n__decorate([Input()], TaskModalComponent.prototype, \"functionalityList\", void 0);\n__decorate([Output()], TaskModalComponent.prototype, \"closeTaskModal\", void 0);\n__decorate([Output()], TaskModalComponent.prototype, \"saveTask\", void 0);\nTaskModalComponent = __decorate([Component({\n  selector: 'app-task-modal',\n  templateUrl: './task-modal.component.html',\n  styleUrls: ['./task-modal.component.scss']\n})], TaskModalComponent);\nexport { TaskModalComponent };","map":{"version":3,"names":["Component","Input","Output","EventEmitter","TaskModalComponent","constructor","taskService","funcService","currentStaticDataService","statusOptions","priorityOptions","closeTaskModal","saveTask","ngOnInit","Date","task","getTaskById","taskId","functionalityList","getFunctionalities","currentProject","getCurrentProject","currentUser","getCurrentUser","onCloseClick","emit","onSaveClick","console","log","checkIfAllTasksDone","onStatusChange","status","started","toISOString","updateFunctionalityStatus","functionality_id","end_date","relatedTasks","getRelatedTasks","tasksDone","filter","length","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Kacper\\Desktop\\ManageMe\\src\\app\\Components\\task-modal\\task-modal.component.ts"],"sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FunctionalitiesService } from 'src/app/Services/Functionalities/functionalities.service';\nimport { TasksService } from 'src/app/Services/Tasks/tasks.service';\n\n@Component({\n  selector: 'app-task-modal',\n  templateUrl: './task-modal.component.html',\n  styleUrls: ['./task-modal.component.scss']\n})\nexport class TaskModalComponent {\n  @Input() taskId;\n  @Input() functionalityList;\n  task;\n  Date: Date;\n  functionality;\n  tasks;\n  currentProject;\n  currentUser;\n  statusOptions: string[] = [\"todo\", \"doing\", \"done\"];\n  priorityOptions: string[] = [\"low\", \"medium\", \"high\"];\n\n  @Output() closeTaskModal = new EventEmitter<void>();\n  @Output() saveTask = new EventEmitter<any>();\n\n  constructor(private taskService: TasksService, private funcService: FunctionalitiesService, private currentStaticDataService: CurrentStaticDataService) {}\n\n  ngOnInit() {\n    this.Date = new Date();\n    this.task = this.taskService.getTaskById(this.taskId);\n    this.functionalityList = this.funcService.getFunctionalities();\n    this.currentProject = this.currentStaticDataService.getCurrentProject();\n    this.currentUser = this.currentStaticDataService.getCurrentUser();\n  }\n\n  onCloseClick() {\n    this.closeTaskModal.emit();\n  }\n\n  onSaveClick() {\n    console.log(this.task);\n    this.saveTask.emit(this.task);\n    this.checkIfAllTasksDone();\n    this.closeTaskModal.emit();\n  }\n\n  onStatusChange() {\n    if (this.task.status === 'doing') {\n      this.task.started = this.Date.toISOString();\n      this.funcService.updateFunctionalityStatus(this.task.functionality_id, 'doing');\n    }\n    if (this.task.status === 'todo') {\n      this.task.started = null;\n      this.task.end_date = null;\n    }\n    if (this.task.status === 'done') {\n      this.task.end_date = this.Date.toISOString();\n    }\n  }\n\n  checkIfAllTasksDone() {\n    const relatedTasks = this.taskService.getRelatedTasks(this.task.functionality_id);\n    const tasksDone = relatedTasks.filter(task => task.status === 'done');\n    if (tasksDone.length === relatedTasks.length) {\n      this.funcService.updateFunctionalityStatus(this.task.functionality_id, 'done');\n    }\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}