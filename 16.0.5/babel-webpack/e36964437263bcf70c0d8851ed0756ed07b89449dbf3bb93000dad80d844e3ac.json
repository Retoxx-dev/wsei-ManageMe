{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nlet TaskComponent = class TaskComponent {\n  constructor(dataService) {\n    this.dataService = dataService;\n    this.isEditing = false;\n  }\n  toggleEdit() {\n    this.isEditing = !this.isEditing;\n    if (this.isEditing) {\n      // Make a copy of the task to preserve the original data\n      this.updatedTask = {\n        ...this.task\n      };\n    }\n  }\n  updateTask() {\n    this.dataService.updateTask(this.functionalityId, this.updatedTask).subscribe(res => {\n      this.task = res;\n      this.toggleEdit();\n    }, error => {\n      console.log(error);\n    });\n  }\n  deleteTask() {\n    this.dataService.deleteTask(this.functionalityId, this.task.id).subscribe(() => {\n      // Optionally handle success\n    }, error => {\n      console.log(error);\n    });\n  }\n};\n__decorate([Input()], TaskComponent.prototype, \"task\", void 0);\n__decorate([Input()], TaskComponent.prototype, \"functionalityId\", void 0);\nTaskComponent = __decorate([Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.css']\n})], TaskComponent);\nexport { TaskComponent };","map":{"version":3,"names":["Component","Input","TaskComponent","constructor","dataService","isEditing","toggleEdit","updatedTask","task","updateTask","functionalityId","subscribe","res","error","console","log","deleteTask","id","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Kacper\\Desktop\\ManageMe\\src\\app\\task\\task.component.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\nimport { DataService } from '../services/data.service';\nimport { Task } from '../models/task';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.css']\n})\nexport class TaskComponent {\n  @Input() task: Task;\n  @Input() functionalityId: number;\n\n  isEditing: boolean = false;\n  updatedTask: Task;\n\n  constructor(private dataService: DataService) { }\n\n  toggleEdit() {\n    this.isEditing = !this.isEditing;\n    if (this.isEditing) {\n      // Make a copy of the task to preserve the original data\n      this.updatedTask = { ...this.task };\n    }\n  }\n\n  updateTask() {\n    this.dataService.updateTask(this.functionalityId, this.updatedTask).subscribe(\n      (res: Task) => {\n        this.task = res;\n        this.toggleEdit();\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n\n  deleteTask() {\n    this.dataService.deleteTask(this.functionalityId, this.task.id).subscribe(\n      () => {\n        // Optionally handle success\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  }\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,KAAK,QAAQ,eAAe;AAShD,IAAaC,aAAa,GAA1B,MAAaA,aAAa;EAOxBC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAH/B,KAAAC,SAAS,GAAY,KAAK;EAGsB;EAEhDC,UAAUA,CAAA;IACR,IAAI,CAACD,SAAS,GAAG,CAAC,IAAI,CAACA,SAAS;IAChC,IAAI,IAAI,CAACA,SAAS,EAAE;MAClB;MACA,IAAI,CAACE,WAAW,GAAG;QAAE,GAAG,IAAI,CAACC;MAAI,CAAE;;EAEvC;EAEAC,UAAUA,CAAA;IACR,IAAI,CAACL,WAAW,CAACK,UAAU,CAAC,IAAI,CAACC,eAAe,EAAE,IAAI,CAACH,WAAW,CAAC,CAACI,SAAS,CAC1EC,GAAS,IAAI;MACZ,IAAI,CAACJ,IAAI,GAAGI,GAAG;MACf,IAAI,CAACN,UAAU,EAAE;IACnB,CAAC,EACDO,KAAK,IAAG;MACNC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB,CAAC,CACF;EACH;EAEAG,UAAUA,CAAA;IACR,IAAI,CAACZ,WAAW,CAACY,UAAU,CAAC,IAAI,CAACN,eAAe,EAAE,IAAI,CAACF,IAAI,CAACS,EAAE,CAAC,CAACN,SAAS,CACvE,MAAK;MACH;IAAA,CACD,EACDE,KAAK,IAAG;MACNC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB,CAAC,CACF;EACH;CACD;AAtCUK,UAAA,EAARjB,KAAK,EAAE,C,0CAAY;AACXiB,UAAA,EAARjB,KAAK,EAAE,C,qDAAyB;AAFtBC,aAAa,GAAAgB,UAAA,EALzBlB,SAAS,CAAC;EACTmB,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,C,EACWnB,aAAa,CAuCzB;SAvCYA,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}